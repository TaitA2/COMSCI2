results = FALSE
alnum = c(letters,0:9)
for (i in 1:100000)
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))
sprintf("%.20f", mean(results))

results
results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000)
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))
sprintf("%.20f", length(results)/(26 * 36 * 36 * 36 * 36))

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000)
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))
sprintf("%.20f", length(results[results==TRUE])/(26 * 36 * 36 * 36 * 36))

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000)
 start = sample(letters,1,replace=T)
 end = sample(alnum,4,replace=T)
 password = c(start,end)
 results[i] = identical(password, rev(password))
portion = mean(results)
cat(sprintf("%.20f\n", mean(results)))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000)
 start <- sample(letters,1,replace<-T)
 end <- sample(alnum,4,replace<-T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))
portion <- mean(results)
cat(sprintf("%.20f\n", mean(results)))

resutls
results
results[results==TRUE]
results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000)
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))
cat(sprintf("%.20f\n", mean(results)))

results[results==TRUE]
# Set the number of samples
num_samples <- 100000

# Initialize results vector
results <- logical(num_samples)  # Use logical vector to store TRUE/FALSE

# Define the character set
alnum <- c(letters, 0:9)

# Start the simulation
for (i in 1:num_samples) {
  start <- sample(letters, 1, replace = TRUE)  # First character must be a letter
  end <- sample(alnum, 4, replace = TRUE)  # The remaining characters
  password <- c(start, end)  # Combine to form the password
  
  # Check if the password is a palindrome
  results[i] <- identical(password, rev(password))  # Store TRUE if palindrome
}

# Calculate the proportion of palindromic passwords
palindrome_proportion <- mean(results)

# Print the result formatted to 20 decimal places
cat(sprintf("Probability of palindromic passwords: %.20f\n", palindrome_proportion))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
cat(sprintf("%.20f\n", mean(results)))


results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
cat(sprintf("%.20f\n", mean(results)))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
cat(sprintf("%.20f\n", mean(results)))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
sprintf("%.20f\n", mean(results))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/(26*36*36*36*36))

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

results <- logical(100000)
alnum <- c(letters,0:9)
for (i in 1:100000){
 start <- sample(letters,1,replace=T)
 end <- sample(alnum,4,replace=T)
 password <- c(start,end)
 results[i] <- identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000){
 start = sample(letters,1,replace=T)
 end = sample(alnum,4,replace=T)
 password = c(start,end)
 results[i] = identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000){
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000){
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

# Set the number of samples
num_samples <- 100000

# Initialize results vector
results <- logical(num_samples)  # Use logical vector to store TRUE/FALSE

# Define the character set
alnum <- c(letters, 0:9)

# Start the simulation
for (i in 1:num_samples) {
  start <- sample(letters, 1, replace = TRUE)  # First character must be a letter
  end <- sample(alnum, 4, replace = TRUE)  # The remaining characters
  password <- c(start, end)  # Combine to form the password
  
  # Check if the password is a palindrome
  results[i] <- identical(password, rev(password))  # Store TRUE if palindrome
}

# Calculate the proportion of palindromic passwords
palindrome_proportion <- mean(results)

# Print the result formatted to 20 decimal places
cat(sprintf("Probability of palindromic passwords: %.20f\n", palindrome_proportion))

results = logical(100000)
alnum = c(letters,0:9)
for (i in 1:100000){
	start = sample(letters,1,replace=T)
	end = sample(alnum,4,replace=T)
	password = c(start,end)
	results[i] = identical(password, rev(password))}
sprintf("%.20f\n", length(results[results==TRUE])/100000)

